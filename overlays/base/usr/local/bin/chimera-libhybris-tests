#!/bin/sh

RED="$(printf '%b' '\033')[1;31m"
GREEN="$(printf '%b' '\033')[1;32m"
YELLOW="$(printf '%b' '\033')[1;33m"
BOLD="$(printf '%b' '\033')[1m"
NORMAL="$(printf '%b' '\033')[0m"

red() { printf '%s' "$RED"; }
green() { printf '%s' "$GREEN"; }
yellow() { printf '%s' "$YELLOW"; }

contains() { case "$2" in *"$1"*) true ;; *) false ;; esac; }
starts_with() { case "$2" in "$1"*) true ;; *) false ;; esac; }
cmd() {
  command="$1"
  output="$2"
  echo "${BOLD}# $command${NORMAL}"
  [ "$output" ] && echo "$output" || $command
}
dinit_status() {
    service=$1
    fancy_name="${2:-$service}"
    log="${3:-/var/log/$service.log}"
    status="$(dinitctl status $service)"
    if contains "STARTED" "$status"; then
        started="started ok!"
        green
    else
        started="not started :/"
        red
    fi
    echo "$fancy_name status: ${started}${NORMAL}"
    cmd "dinitctl status $service" "$status"
    cmd "cat $log"
    echo
}
getprop() { timeout 0.2 /usr/bin/getprop "$@"; }


echo
if grep -q cgroup2 /proc/filesystems; then
    if grep -q 'cgroup2 /sys/fs/cgroup .*,nsdelegate' /proc/mounts; then
        green
        echo "Kernel control groups support: v2 with nsdelegate${NORMAL}"
    else
        yellow
        echo "Kernel control groups support: v2 without nsdelegate${NORMAL}"
    fi
else
    red
    echo "Kernel control groups support: legacy v1${NORMAL}"
fi
echo


dinit_pending="$(dinitctl list | grep -Ev '^\[(\{|\[)+')"
[ "$dinit_pending" ] && dinit_pending_count=$(echo "$dinit_pending" | wc -l | xargs) || dinit_pending_count=0
[ "$dinit_pending_count" -gt 0 ] && yellow || green
echo "Pending dinit services: ${dinit_pending_count}${NORMAL}"
cmd "dinitctl list | grep -Ev '^\[(\{|\[)+'" "$dinit_pending"
echo


dinit_status android-mounts "Android mounts"


dinit_status lxc-android "Halium LXC container"


apilevel=$(getprop ro.build.version.sdk 2>/dev/null)
if [ "$apilevel" ]; then
    getprop_working="yes!"
    green
else
    getprop_working="no :("
    red
fi
echo "libhybris getprop working: ${getprop_working}${NORMAL}"
cmd "getprop ro.build.version.sdk"
starts_with "yes" "$getprop_working" && cmd "getprop ro.vndk.version"
echo


if starts_with "yes" "$getprop_working"; then
    system_device=$(getprop ro.build.product 2>/dev/null)
    if starts_with "halium" "$system_device"; then
        gsi="yes!"
        green
    else
        gsi="no/unknown :/"
        yellow
    fi
    echo "Using Halium Generic System Image (GSI): ${gsi}${NORMAL}"
    cmd "getprop ro.build.product" "$system_device"
    echo
fi


android_lsof="$(lsof /android 2>/dev/null)"
[ "$android_lsof" ] && android_lsof_count=$(echo "$android_lsof" | wc -l | xargs) || android_lsof_count=0
if [ "$android_lsof_count" -gt 0 ]; then
    echo "$android_lsof" > /tmp/lsof-android.log
    open_files="yes (${android_lsof_count})! check /tmp/lsof-android.log for output of 'lsof /android'"
    green
else
    open_files="none :("
    red
fi
echo "Open files under /android: ${open_files}${NORMAL}"
echo


timeout 0.2 binder-list > /tmp/binder-list.log
binder_list_count=$(wc -l /tmp/binder-list.log | awk '{print $1}')
if [ "$binder_list_count" -gt 0 ]; then
    binder_interfaces="yes (${binder_list_count})!"
    green
else
    binder_interfaces="none :("
    red
fi
echo "Binder IPC interfaces available: ${binder_interfaces} check /tmp/binder-list.log for output of 'binder-list'${NORMAL}"
echo


HYBRIS_LD_DEBUG=1 test_sensors > /tmp/sensors.log 2>&1
sensors_count=$(grep -c ' Sensor ' /tmp/sensors.log)
if [ "$sensors_count" -gt 0 ]; then
    sensors_available="yes (${sensors_count})!"
    green
else
    sensors_available="no :("
    red
fi
echo "Sensors available: ${sensors_available} check /tmp/sensors.log for output of 'HYBRIS_LD_DEBUG=1 test_sensors'${NORMAL}"
echo


HYBRIS_LD_DEBUG=1 test_egl_configs > /tmp/egl_configs.log 2>&1
if test_egl_configs 2>/dev/null; then
    egl_configs="yes ($(grep -c ' Configuration #' /tmp/egl_configs.log))!"
    green
else
    egl_configs="none :("
    red
fi
echo "EGL configs available: ${egl_configs} check /tmp/egl_configs.log for output of 'HYBRIS_LD_DEBUG=1 test_egl_configs'${NORMAL}"
echo
